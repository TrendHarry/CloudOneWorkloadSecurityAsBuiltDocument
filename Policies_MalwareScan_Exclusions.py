import requests
import csv
from concurrent.futures import ThreadPoolExecutor, as_completed

def get_data_with_cache(url, id, cache, headers):
    if not id:
        return "Not Configured"

    if id in cache:
        return cache[id]

    response = requests.get(f"{url}/{id}", headers=headers, verify=False)
    if response.status_code == 200:
        data = response.json()
        cache[id] = data
        return data
    else:
        return "Not Configured"

def process_policy(policy, headers, dsm, company_name, environment, caches):
    if policy["name"].startswith("="):
        policy["name"] = "'" + policy["name"]

    if "realTimeScanConfigurationID" in policy["antiMalware"]:
        config_id = policy["antiMalware"]["realTimeScanConfigurationID"]
        if config_id != 0:
            config_url = f"https://{dsm}/api/antimalwareconfigurations"
            config = get_data_with_cache(config_url, config_id, caches["antimalwareconfigurations"], headers)
            config_name = config.get("name", "Not Configured") if config != "Not Configured" else "Not Configured"
            
            excludedDirectoryList = get_data_with_cache(f"https://{dsm}/api/directorylists", config.get('excludedDirectoryListID'), caches["directorylists"], headers) if config != "Not Configured" else "Not Configured"
            excludedFileList = get_data_with_cache(f"https://{dsm}/api/filelists", config.get('excludedFileListID'), caches["filelists"], headers) if config != "Not Configured" else "Not Configured"
            excludedFileExtensionList = get_data_with_cache(f"https://{dsm}/api/fileextensionlists", config.get('excludedFileExtensionListID'), caches["fileextensionlists"], headers) if config != "Not Configured" else "Not Configured"
            excludedProcessImageFileList = get_data_with_cache(f"https://{dsm}/api/filelists", config.get('excludedProcessImageFileListID'), caches["filelists"], headers) if config != "Not Configured" else "Not Configured"
            row_data = [policy["name"], config_name, excludedDirectoryList.get("name", "Not Configured") if excludedDirectoryList != "Not Configured" else "Not Configured", excludedFileList.get("name", "Not Configured") if excludedFileList != "Not Configured" else "Not Configured", excludedFileExtensionList.get("name", "Not Configured") if excludedFileExtensionList != "Not Configured" else "Not Configured", excludedProcessImageFileList.get("name", "Not Configured") if excludedProcessImageFileList != "Not Configured" else "Not Configured", company_name, environment]
        else:
            row_data = [policy["name"], "Not Configured", "Not Configured", "Not Configured", "Not Configured", "Not Configured", company_name, environment]
    else:
        row_data = [policy["name"], "Not Configured", "Not Configured", "Not Configured", "Not Configured", "Not Configured", company_name, environment]
    return row_data

def get_exclusion_policies_realtimescan(dsm, api_key, company_name, environment):
    url = f"https://{dsm}/api/policies"
    headers = {
      'api-secret-key': f'{api_key}',
      'api-version': 'v1'
    }
    
    response = requests.get(url, headers=headers, verify=False)
    policies = response.json()["policies"]
    
    file_name = f"{company_name}_policy_realtime_{environment}.csv"

    caches = {
        "antimalwareconfigurations": {},
        "directorylists": {},
        "filelists": {},
        "fileextensionlists": {}
    }

    with open(file_name, "w", newline="", encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["Policy Name", "Malware Scan Configuration", "Excluded Directory", "Excluded File List", "Excluded File Extension List", "Excluded Process Image File List", "Company", "Environment"])

        with ThreadPoolExecutor() as executor:
            futures = [executor.submit(process_policy, policy, headers, dsm, company_name, environment, caches) for policy in policies]

            for future in as_completed(futures):
                row_data = future.result()
                writer.writerow(row_data)

    csvfile.close()
    print("Policies Real Time Scan Configs Completed")
    return file_name
